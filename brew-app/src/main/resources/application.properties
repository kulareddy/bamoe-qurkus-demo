#####################################
# Quarkus settings
#####################################
%dev.quarkus.http.port=${KOGITO_SERVICE_PORT:8080}

quarkus.http.cors=true
quarkus.dev-ui.cors.enabled=false
quarkus.http.cors.origins=*
quarkus.swagger-ui.always-include=true
quarkus.smallrye-openapi.path=docs/openapi.json
quarkus.kogito.data-index.graphql.ui.always-include=true

quarkus.devservices.enabled=false

#####################################
# Events settings
#####################################
kafka.bootstrap.servers=${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}

mp.messaging.incoming.make-drink.connector=smallrye-kafka
mp.messaging.incoming.make-drink.topic=order-drink
mp.messaging.incoming.make-drink.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.incoming.make-drink.auto.offset.reset=earliest

mp.messaging.outgoing.drink-ready.connector=smallrye-kafka
mp.messaging.outgoing.drink-ready.topic=order-drink
mp.messaging.outgoing.drink-ready.value.serializer=org.apache.kafka.common.serialization.StringSerializer


#####################################
# Persistence settings
#####################################
kie.flyway.enabled=true
kogito.persistence.type=jdbc
kogito.persistence.optimistic.lock=true

quarkus.datasource.db-kind=postgresql
quarkus.datasource.username=${DB_USER:kogito}
quarkus.datasource.password=${DB_PASSWORD:Ch@ngeme}
quarkus.datasource.jdbc.url=jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/${DB_NAME:kogito}
quarkus.datasource.reactive.url=postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/${DB_NAME:kogito}

# Disabling Hibernate schema generation
quarkus.hibernate-orm.database.generation=none
quarkus.hibernate-orm.validate-in-dev-mode=false

#####################################
# Transactions
#####################################
kogito.transactionEnabled=true

#####################################
# Jobs Service configuration
#####################################
kogito.jobs-service.url=http://localhost:${quarkus.http.port}
kogito.jobs-service.management.heartbeat.management-id=${quarkus.application.name}
# run periodic job loading every minute
kogito.jobs-service.loadJobIntervalInMinutes=1
# load jobs into the InMemory scheduler that expire within the next 10 minutes
kogito.jobs-service.schedulerChunkInMinutes=10
# (re)load jobs into the InMemory scheduler that have expired in the last 5 minutes and have not been properly executed
kogito.jobs-service.loadJobFromCurrentTimeIntervalInMinutes=5

#####################################
# Services definition
#####################################
kogito.service.url=http://localhost:${quarkus.http.port}
kogito.data-index.url=http://localhost:${quarkus.http.port}

#####################################
# Security & Dev UI
#####################################
# Development Security Configuration - ENABLE OIDC
%dev.kogito.security.auth.enabled=false
%dev.quarkus.oidc.enabled=false
# Production Security Configuration - ENABLE OIDC
kogito.security.auth.enabled=true
quarkus.oidc.enabled=true

# Disable HTTP authentication in dev mode
%dev.quarkus.http.auth.permission.authenticated.paths=
%dev.quarkus.http.auth.permission.public.paths=/*
%dev.quarkus.http.auth.permission.public.policy=permit
# Authorization - Enable authentication for all endpoints (only when security is enabled)
quarkus.http.auth.permission.authenticated.paths=/*
quarkus.http.auth.permission.authenticated.policy=authenticated
quarkus.http.auth.permission.public.paths=/q/*,/docs/*
quarkus.http.auth.permission.public.policy=permit

# JWT Resource Server Configuration 
quarkus.smallrye-jwt.enabled=true
mp.jwt.verify.publickey.location=${OIDC_AUTH_SERVER_URL}/protocol/openid-connect/certs
mp.jwt.verify.issuer=${OIDC_AUTH_SERVER_URL}

# OIDC Configuration
quarkus.oidc.discovery-enabled=true
quarkus.oidc.tenant-enabled=true
quarkus.oidc.application-type=service
quarkus.oidc.bearer-only=false
quarkus.oidc.auth-server-url=${OIDC_AUTH_SERVER_URL}
quarkus.oidc.client-id=${OIDC_CLIENT_ID:brew-app-client-id}
quarkus.oidc.credentials.secret=${OIDC_CLIENT_SECRET:brew-app-secret}

# Request standard OIDC scopes only 
quarkus.oidc.authentication.scopes=oidc profile email

# dev-ui users and groups
%dev.kogito.security.auth.impersonation.enabled=true
%dev.kogito.security.auth.impersonation.allowed-for-roles=manager
%dev.bamoe.devui.users.alice.groups=barista
%dev.bamoe.devui.users.dave.groups=manager


#####################################
# Logging
#####################################
# Minimize logging for all categories
quarkus.log.level=INFO
# Enable more verbose logging for application specific messages only
quarkus.log.category."com.example".level=INFO
# Enable verbose logging for Kogito and jbpm for troubleshooting issues
#quarkus.log.category."org.jbpm".level=DEBUG
#quarkus.log.category."org.kie.kogito".level=DEBUG

# OIDC and Security Logging - Enable for authentication debugging
quarkus.log.category."io.quarkus.oidc".level=DEBUG
quarkus.log.category."io.quarkus.security".level=DEBUG
quarkus.log.category."io.quarkus.smallrye.jwt".level=DEBUG
quarkus.log.category."io.smallrye.jwt".level=DEBUG