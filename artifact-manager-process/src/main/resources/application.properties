#####################################
# Quarkus settings 

quarkus.http.port=${KOGITO_SERVICE_PORT:8080}
quarkus.http.cors=true
quarkus.dev-ui.cors.enabled=false
quarkus.http.cors.origins=*
quarkus.swagger-ui.always-include=true
quarkus.smallrye-openapi.path=docs/openapi.json
quarkus.kogito.data-index.graphql.ui.always-include=true

# Dev UI specific configuration
%dev.quarkus.dev-ui.cors.enabled=true


#####################################
# Dev services settings
#####################################
quarkus.devservices.enabled=false


#####################################
# Events settings
#####################################
# kogito.messaging.as-cloudevents=true


#####################################
# Persistence settings
#####################################
# Enables or disables Flyway database migrations for the KIE (Knowledge Is Everything) module.
kie.flyway.enabled=true
# Tells the Kogito runtime what kind of persistence is configured.
kogito.persistence.type=jdbc
kogito.persistence.optimistic.lock=true

quarkus.datasource.db-kind=postgresql
quarkus.datasource.username=${DB_USER:artifact}
quarkus.datasource.password=${DB_PASSWORD:Ch@ngeme}
quarkus.datasource.jdbc.url=jdbc:postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/${DB_NAME:kogito-db}
quarkus.datasource.reactive.url=postgresql://${DB_HOST:localhost}:${DB_PORT:5432}/${DB_NAME:kogito-db}

# Disabling Hibernate schema generation
quarkus.hibernate-orm.database.generation=none
quarkus.hibernate-orm.validate-in-dev-mode=false


#####################################
# Transactions support
#####################################
kogito.transactionEnabled=true


#####################################
# Jobs Service configuration
#####################################
# Job Service configuration
kogito.jobs-service.url=${KOGITO_JOBS-SERVICE_URL:http://localhost:${quarkus.http.port}}
# run periodic job loading every minute
kogito.jobs-service.loadJobIntervalInMinutes=1
# load jobs into the InMemory scheduler that expire within the next 10 minutes
kogito.jobs-service.schedulerChunkInMinutes=10
# (re)load jobs into the InMemory scheduler that have expired in the last 5 minutes and have not been properly executed
kogito.jobs-service.loadJobFromCurrentTimeIntervalInMinutes=5

#####################################
# Services definition 
#####################################
kogito.service.url=${KOGITO_SERVICE_URL:http://localhost:${quarkus.http.port}}
kogito.data-index.url=${KOGITO_DATA-INDEX_URL:http://localhost:${quarkus.http.port}}

#####################################
# Security 
#####################################
# Authorization - Enable authentication for all endpoints (only when security is enabled)
quarkus.http.auth.permission.authenticated.paths=/*
quarkus.http.auth.permission.authenticated.policy=authenticated
quarkus.http.auth.permission.public.paths=/q/dev-ui/*,/q/oidc/*,/q/health/*,/q/openapi,/docs/*
quarkus.http.auth.permission.public.policy=permit

# Completely disable HTTP authentication in dev mode
%dev.quarkus.http.auth.permission.authenticated.paths=
%dev.quarkus.http.auth.permission.public.paths=/*
%dev.quarkus.http.auth.permission.public.policy=permit

# Development Security Configuration - ENABLE OIDC
%dev.kogito.security.auth.enabled=false
%dev.quarkus.oidc.enabled=false

kogito.security.auth.enabled=true
quarkus.oidc.enabled=true

# JWT Resource Server Configuration (Quarkus equivalent of Spring Security OAuth2)
quarkus.smallrye-jwt.enabled=true
mp.jwt.verify.publickey.location=${OIDC_AUTH_SERVER_URL}/protocol/openid-connect/certs
mp.jwt.verify.issuer=${OIDC_AUTH_SERVER_URL}

# OIDC Configuration
quarkus.oidc.discovery-enabled=true
quarkus.oidc.tenant-enabled=true
quarkus.oidc.application-type=service
quarkus.oidc.bearer-only=false
quarkus.oidc.auth-server-url=${OIDC_AUTH_SERVER_URL:http://localhost:9180/realms/artifact-realm}
quarkus.oidc.client-id=${OIDC_CLIENT_ID:artifact-manager-process}
quarkus.oidc.credentials.secret=${OIDC_CLIENT_SECRET:artifact-manager-secret}

# Request standard OIDC scopes only (groups will be included via client mappers)
quarkus.oidc.authentication.scopes=oidc profile email

%dev.kogito.security.auth.impersonation.enabled=true
%dev.bamoe.devui.users.admin.groups=Admins
%dev.bamoe.devui.users.owner1.groups=AG-Owners
%dev.bamoe.devui.users.owner2.groups=AG-Owners
%dev.bamoe.devui.users.member1.groups=AG-Members
%dev.bamoe.devui.users.member2.groups=AG-Members
%dev.bamoe.devui.users.consumer1.groups=AG-Consumers
%dev.bamoe.devui.users.consumer2.groups=AG-Consumers
%dev.bamoe.devui.users.requester1.groups=AG-Requesters
%dev.bamoe.devui.users.requester2.groups=AG-Requesters
%dev.kogito.security.auth.impersonation.allowed-for-roles=AG-Owners


#####################################
# Logging 
#####################################
# Minimize logging for all categories
quarkus.log.level=INFO
# Enable more verbose logging for application specific messages only
quarkus.log.category."com.example".level=INFO
# Enable verbose logging for Kogito and jbpm for troubleshooting issues
#quarkus.log.category."org.jbpm".level=DEBUG
#quarkus.log.category."org.kie.kogito".level=DEBUG

# OIDC and Security Logging - Enable for authentication debugging
quarkus.log.category."io.quarkus.oidc".level=DEBUG
quarkus.log.category."io.quarkus.security".level=DEBUG
quarkus.log.category."io.quarkus.smallrye.jwt".level=DEBUG
quarkus.log.category."io.smallrye.jwt".level=DEBUG
